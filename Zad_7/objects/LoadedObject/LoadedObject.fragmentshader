#version 330 core
uniform vec3 upperLightPosition;  
uniform vec3 viewPosition;

in vec3 fragmentPosition;
in vec3 normalVector;
in vec2 textureUV;

out vec4 FragColor;

uniform sampler2D ourTexture;

vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }

float snoise(vec2 v) {

    // Precompute values for skewed triangular grid
    const vec4 C = vec4(0.211324865405187,
                        // (3.0-sqrt(3.0))/6.0
                        0.366025403784439,
                        // 0.5*(sqrt(3.0)-1.0)
                        -0.577350269189626,
                        // -1.0 + 2.0 * C.x
                        0.024390243902439);
                        // 1.0 / 41.0
    // First corner (x0)
    vec2 i  = floor(v + dot(v, C.yy));
    vec2 x0 = v - i + dot(i, C.xx);
    // Other two corners (x1, x2)
    vec2 i1 = vec2(0.0);
    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);
    vec2 x1 = x0.xy + C.xx - i1;
    vec2 x2 = x0.xy + C.zz;
    // Do some permutations to avoid
    // truncation effects in permutation
    i = mod289(i);
    vec3 p = permute(
            permute( i.y + vec3(0.0, i1.y, 1.0))
                + i.x + vec3(0.0, i1.x, 1.0 ));

    vec3 m = max(0.5 - vec3(
                        dot(x0,x0),
                        dot(x1,x1),
                        dot(x2,x2)
                        ), 0.0);
    m = m*m ;
    m = m*m ;
    // Gradients:
    //  41 pts uniformly over a line, mapped onto a diamond
    //  The ring size 17*17 = 289 is close to a multiple
    //      of 41 (41*7 = 287)
    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;
    // Normalise gradients implicitly by scaling m
    // Approximation of: m *= inversesqrt(a0*a0 + h*h);
    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);
    // Compute final noise value at P
    vec3 g = vec3(0.0);
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);
    return 130.0 * dot(m, g);
}

// void main()
// {
//     FragColor = texture(ourTexture, TexCoord);
// }

void main() {

    // vec2 st = gl_FragCoord.xy/u_resolution.xy;
    // st.x *= u_resolution.x/u_resolution.y;

    vec3 color = vec3(0.0);

    vec2 st = textureUV;
    // Scale the space in order to see the function
    st *= 100.;

    color = vec3(snoise(st)*.5+.5);

    FragColor = texture(ourTexture, textureUV);
    FragColor += vec4(color, 1.0);
}

// void main(){
	// vec3 objectColor = vec3(0.804, 0.945, 0.386);
    // vec3 upperLightColor = vec3(1.0, 1.0, 1.0);
    // vec3 playerLightColor = vec3(0.804, 0.945, 0.386);

    // float upperAmbientStrength = 0.1;
    // float playerAmbientStrength = 0.1;
    
    // vec3 playerLightPosition = viewPosition;

    // // vec3 ambient = ambientStrength * lightColor;
    // vec3 upperAmbient = upperAmbientStrength * upperLightColor;
    // vec3 playerAmbient = playerAmbientStrength * playerLightColor;

    // vec3 norm = normalize(normalVector);
    // vec3 playerLightDir = normalize(playerLightPosition - fragmentPosition); 
    // vec3 upperLightDir = normalize(upperLightPosition - fragmentPosition); 
    // // vec3 lightDir = normalize(lightPosition - fragmentPosition);  
    // float diffPl = max(dot(norm, playerLightDir), 0.0);
    // float diffUp = max(dot(norm, upperLightDir), 0.0);
    // // float strDistDependendPlayer = min((1/ (distance(playerLightPosition, fragmentPosition)/10))/15, 1.0);
    // // float strDistDependendUpper = min((1/ (distance(upperLightPosition, fragmentPosition)/10))/5, 1.0);

    // // vec3 diffuse = diffPl * playerLightColor * strDistDependendPlayer + diffUp * upperLightColor * strDistDependendUpper;
    // vec3 diffuse = diffPl * playerLightColor + diffUp * upperLightColor;
    // // float diff = max(dot(norm, lightDir), 0.0);
    // // vec3 diffuse = diff * lightColor;


    // // float specularStrength = 0.9;
    // // vec3 viewDir = normalize(viewPosition - fragmentPosition);
    // // vec3 reflectDir = reflect(-lightDir, norm);  
    // // int shinesses = 256;
    // // float spec = pow(max(dot(viewDir, reflectDir), 0.0), shinesses);
    // // vec3 specular = specularStrength * spec * lightColor;  

    // // vec3 result = (ambient + diffuse + specular) * objectColor;

    // float playerSpecularStrength = 0.4;
    // float upperSpecularStrength = 0.5;
    // vec3 viewDir = normalize(viewPosition - fragmentPosition);
    // vec3 playerReflectDir = reflect(-playerLightDir, norm);  
    // vec3 uppperReflectDir = reflect(-upperLightDir, norm);  
    // int shinesses = 256;
    // float specPl = pow(max(dot(viewDir, playerReflectDir), 0.0), shinesses);
    // float specUp = pow(max(dot(viewDir, uppperReflectDir), 0.0), shinesses);
    // vec3 specular = playerSpecularStrength * specPl * playerLightColor + upperSpecularStrength * specUp * upperLightColor;  

    // vec3 result = (playerAmbient + upperAmbient + diffuse + specular) * objectColor;    
    // Color = vec4(result, 1.0);

    // // Color = vec4(1.0, 0.0, 1.0,1.0);
// }