#version 330 core
uniform vec3 lightPosition;  
uniform vec3 viewPosition;

out vec4 FragColor;

in vec3 fragmentColor;
//wazne tu:
in vec3 normalVector; // Normal
in vec3 fragmentPosition; //fragPos
// in vec3 lightPos;

void main()
{
    // ((gl_InstanceID % 50) / 50)
    vec3 objectColor = vec3(0.63, 0.83, 0.96);
    vec3 lightColor = vec3(1.0, 1.0, 1.0);
    
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;
    vec3 norm = normalize(normalVector);
    vec3 lightDir = normalize(lightPosition - fragmentPosition);  
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPosition - fragmentPosition);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;  

    vec3 result = (ambient + diffuse + specular) * objectColor;
    FragColor = vec4(result, 1.0);

    // vec3 result = ambient * objectColor;
    // FragColor = vec4(result, 1.0);
}

