#version 330 core
uniform vec3 upperLightPosition;  
uniform vec3 viewPosition;

out vec4 Color;

in vec3 fragmentColor;
//wazne tu:
in vec3 normalVector; // Normal
in vec3 fragmentPosition; //fragPos

void main(){

	vec3 objectColor = vec3(0.804, 0.945, 0.386);
    vec3 upperLightColor = vec3(1.0, 1.0, 1.0);
    vec3 playerLightColor = vec3(0.804, 0.945, 0.386);

    float upperAmbientStrength = 0.1;
    float playerAmbientStrength = 0.1;
    
    vec3 playerLightPosition = viewPosition;

    // vec3 ambient = ambientStrength * lightColor;
    vec3 upperAmbient = upperAmbientStrength * upperLightColor;
    vec3 playerAmbient = playerAmbientStrength * playerLightColor;

    vec3 norm = normalize(normalVector);
    vec3 playerLightDir = normalize(playerLightPosition - fragmentPosition); 
    vec3 upperLightDir = normalize(upperLightPosition - fragmentPosition); 
    // vec3 lightDir = normalize(lightPosition - fragmentPosition);  
    float diffPl = max(dot(norm, playerLightDir), 0.0);
    float diffUp = max(dot(norm, upperLightDir), 0.0);
    // float strDistDependendPlayer = min((1/ (distance(playerLightPosition, fragmentPosition)/10))/15, 1.0);
    // float strDistDependendUpper = min((1/ (distance(upperLightPosition, fragmentPosition)/10))/5, 1.0);

    // vec3 diffuse = diffPl * playerLightColor * strDistDependendPlayer + diffUp * upperLightColor * strDistDependendUpper;
    vec3 diffuse = diffPl * playerLightColor + diffUp * upperLightColor;
    // float diff = max(dot(norm, lightDir), 0.0);
    // vec3 diffuse = diff * lightColor;


    // float specularStrength = 0.9;
    // vec3 viewDir = normalize(viewPosition - fragmentPosition);
    // vec3 reflectDir = reflect(-lightDir, norm);  
    // int shinesses = 256;
    // float spec = pow(max(dot(viewDir, reflectDir), 0.0), shinesses);
    // vec3 specular = specularStrength * spec * lightColor;  

    // vec3 result = (ambient + diffuse + specular) * objectColor;

    float playerSpecularStrength = 0.4;
    float upperSpecularStrength = 0.5;
    vec3 viewDir = normalize(viewPosition - fragmentPosition);
    vec3 playerReflectDir = reflect(-playerLightDir, norm);  
    vec3 uppperReflectDir = reflect(-upperLightDir, norm);  
    int shinesses = 256;
    float specPl = pow(max(dot(viewDir, playerReflectDir), 0.0), shinesses);
    float specUp = pow(max(dot(viewDir, uppperReflectDir), 0.0), shinesses);
    vec3 specular = playerSpecularStrength * specPl * playerLightColor + upperSpecularStrength * specUp * upperLightColor;  

    vec3 result = (playerAmbient + upperAmbient + diffuse + specular) * objectColor;    
    Color = vec4(result, 1.0);

    // Color = vec4(1.0, 0.0, 1.0,1.0);
}