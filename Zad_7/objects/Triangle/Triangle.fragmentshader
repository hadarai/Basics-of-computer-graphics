#version 330 core
uniform vec3 upperlightPosition;  
uniform vec3 viewPosition;

out vec4 Color;

in vec3 fragmentColor;
//wazne tu:
in vec3 normalVector; // Normal
in vec3 fragmentPosition; //fragPos

void main(){

	vec3 objectColor = vec3(0.804, 0.945, 0.386);
    vec3 lightColor = vec3(1.0, 1.0, 1.0);
    
    float ambientStrength = 0.2;
    vec3 ambient = ambientStrength * lightColor;
    vec3 norm = normalize(normalVector);
    vec3 lightDir = normalize(upperlightPosition - fragmentPosition);  
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    float specularStrength = 0.9;
    vec3 viewDir = normalize(viewPosition - fragmentPosition);
    vec3 reflectDir = reflect(-lightDir, norm);  
    int shinesses = 256;
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shinesses);
    vec3 specular = specularStrength * spec * lightColor;  

    vec3 result = (ambient + diffuse + specular) * objectColor;
    Color = vec4(result, 1.0);
    Color = vec4(0.0, 1.0, 0.0, 1.0);

}